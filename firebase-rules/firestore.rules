rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Base rule - authenticated users can read/write their own data
    match /{document=**} {
      allow read, write: if false; // Default deny
    }
    
    // PengurusCollection rules
    match /PengurusCollection/{userId} {
      // Anyone can read PengurusCollection documents
      allow read: if request.auth != null;
      
      // Only superAdmins can create new pengurus
      allow create: if userIsSuperAdmin();
      
      // Users can update their own data, and superAdmins can update anyone's data
      allow update: if request.auth.uid == userId || userIsSuperAdmin();
      
      // Only superAdmins can delete
      allow delete: if userIsSuperAdmin();
    }
    
    // SantriCollection rules
    match /SantriCollection/{santriId} {
      // Anyone can read santri data - needed for login functionality
      // If this causes security concerns later, we can restrict it more
      allow read: if true;
      
      // Allow anyone to create santri with 'Pending' status (for registration)
      allow create: if 
        // No authentication required for registration
        request.resource.data.statusAktif == 'Pending' && 
        // Make sure required fields are present
        request.resource.data.nama is string &&
        request.resource.data.email is string &&
        request.resource.data.kodeAsrama is string;
      
      // Only pengurus, pengasuh, and superAdmins can update/delete santri data
      allow update, delete: if userHasRole("pengurus") || userHasRole("pengasuh") || userIsSuperAdmin();
    }
    
    // TagihanCollection rules
    match /TagihanCollection/{tagihanId} {
      // Pengurus, pengasuh, superAdmin can read all tagihan
      // Wali santri can only read their own santri's tagihan
      allow read: if userHasRole("pengurus") || userHasRole("pengasuh") || userIsSuperAdmin() ||
                    (userHasRole("waliSantri") && resource.data.santriId == getSantriIdForWali());
      
      // Only pengurus, pengasuh, and superAdmins can create/update/delete tagihan
      allow create, update, delete: if userHasRole("pengurus") || userHasRole("pengasuh") || userIsSuperAdmin();
    }
    
    // NEW: Invoices collection rules
    match /Invoices/{invoiceId} {
      // Any authenticated user can read invoice data
      allow read: if request.auth != null;
      
      // Only pengurus, pengasuh, and superAdmins can create/update invoices
      allow create, update: if userHasRole("pengurus") || userHasRole("pengasuh") || userIsSuperAdmin();
      
      // Only functions can delete invoices (clients use the deleteInvoice Cloud Function)
      allow delete: if false;
    }
    
    // NEW: PaymentStatuses collection rules
    match /PaymentStatuses/{paymentStatusId} {
      // Pengurus, pengasuh, superAdmin can read all payment statuses
      // Wali santri can only read their own santri's payment statuses
      allow read: if userHasRole("pengurus") || userHasRole("pengasuh") || userIsSuperAdmin() ||
                   (userHasRole("waliSantri") && resource.data.santriId == getSantriIdForWali());
      
      // Only pengurus, pengasuh, and superAdmins can update payment statuses
      allow update: if userHasRole("pengurus") || userHasRole("pengasuh") || userIsSuperAdmin();
      
      // No direct creation via client - this is handled by Cloud Functions
      allow create: if false;
      
      // No one can delete payment statuses
      allow delete: if false;
    }
    
    // NEW: Counters collection rules
    match /Counters/{counterId} {
      // Only pengurus, pengasuh, and superAdmins can read counters
      allow read: if userHasRole("pengurus") || userHasRole("pengasuh") || userIsSuperAdmin();
      
      // No direct writes to counters - this is managed by Cloud Functions
      allow write: if false;
    }
    
    // Helper functions
    function userIsSuperAdmin() {
      let userDoc = get(/databases/$(database)/documents/PengurusCollection/$(request.auth.uid)).data;
      return userDoc != null && userDoc.role == "superAdmin";
    }
    
    function userHasRole(role) {
      let userDoc = get(/databases/$(database)/documents/PengurusCollection/$(request.auth.uid)).data;
      return userDoc != null && userDoc.role == role;
    }
    
    function getSantriIdForWali() {
      let userDoc = get(/databases/$(database)/documents/PengurusCollection/$(request.auth.uid)).data;
      return userDoc != null ? userDoc.santriId : null;
    }
  }
}